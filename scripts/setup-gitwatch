#!/bin/bash
# setup-gitwatch - Automated gitwatch setup for any project
# Usage: setup-gitwatch [project_path]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Parse arguments
PROJECT_PATH="${1:-$(pwd)}"
PROJECT_PATH=$(realpath "$PROJECT_PATH")
PROJECT_NAME=$(basename "$PROJECT_PATH")
SERVICE_NAME="gitwatch-$(echo $PROJECT_NAME | tr '[:upper:]' '[:lower:]' | tr ' ' '-')"

echo -e "${GREEN}Setting up gitwatch for: $PROJECT_NAME${NC}"
echo "Path: $PROJECT_PATH"
echo "Service name: $SERVICE_NAME"
echo ""

# Validate project path
if [ ! -d "$PROJECT_PATH" ]; then
    echo -e "${RED}Error: Project path $PROJECT_PATH does not exist${NC}"
    exit 1
fi

cd "$PROJECT_PATH"

# Check if it's a git repository
if [ ! -d .git ]; then
    echo -e "${YELLOW}Initializing git repository...${NC}"
    git init
    git branch -M main
fi

# Check if gitwatch is installed
if ! command -v gitwatch &> /dev/null; then
    echo -e "${YELLOW}Installing gitwatch...${NC}"
    TEMP_DIR=$(mktemp -d)
    cd "$TEMP_DIR"
    git clone https://github.com/gitwatch/gitwatch.git
    sudo cp gitwatch/gitwatch.sh /usr/local/bin/gitwatch
    sudo chmod +x /usr/local/bin/gitwatch
    cd - > /dev/null
    rm -rf "$TEMP_DIR"
fi

# Install inotify-tools if needed
if ! command -v inotifywait &> /dev/null; then
    echo -e "${YELLOW}Installing inotify-tools...${NC}"
    sudo apt-get update && sudo apt-get install -y inotify-tools
fi

# Set up SSH agent services (if not already done)
mkdir -p ~/.config/systemd/user

# Check if ssh-agent service exists
if [ ! -f ~/.config/systemd/user/ssh-agent.service ]; then
    echo -e "${YELLOW}Creating ssh-agent service...${NC}"
    cat > ~/.config/systemd/user/ssh-agent.service << 'EOF'
[Unit]
Description=SSH key agent

[Service]
Type=simple
Environment=SSH_AUTH_SOCK=%t/ssh-agent.socket
ExecStart=/usr/bin/ssh-agent -D -a $SSH_AUTH_SOCK

[Install]
WantedBy=default.target
EOF
    
    systemctl --user daemon-reload
    systemctl --user enable --now ssh-agent.service
fi

# Check if ssh-add service exists
if [ ! -f ~/.config/systemd/user/ssh-add.service ]; then
    echo -e "${YELLOW}Creating ssh-add service...${NC}"
    
    # Find SSH key
    SSH_KEY_PATH=""
    for key in ~/.ssh/id_ed25519 ~/.ssh/id_rsa ~/.ssh/id_ecdsa; do
        if [ -f "$key" ]; then
            SSH_KEY_PATH="$key"
            break
        fi
    done
    
    if [ -z "$SSH_KEY_PATH" ]; then
        echo -e "${RED}Error: No SSH key found. Please create one with ssh-keygen${NC}"
        exit 1
    fi
    
    cat > ~/.config/systemd/user/ssh-add.service << EOF
[Unit]
Description=Add SSH key
After=ssh-agent.service

[Service]
Type=oneshot
Environment=SSH_AUTH_SOCK=%t/ssh-agent.socket
ExecStart=/usr/bin/ssh-add $SSH_KEY_PATH

[Install]
WantedBy=default.target
EOF
    
    systemctl --user enable --now ssh-add.service
fi

cd "$PROJECT_PATH"

# Update .gitignore
echo -e "${YELLOW}Updating .gitignore...${NC}"
touch .gitignore

# Use template if available
TEMPLATE_FILE="$HOME/.config/gitwatch-automation/gitignore_template"
if [ -f "$TEMPLATE_FILE" ]; then
    # Check if gitwatch section already exists
    if ! grep -q "=== Gitwatch Auto-Generated Exclusions ===" .gitignore; then
        echo "" >> .gitignore
        cat "$TEMPLATE_FILE" >> .gitignore
    fi
else
    # Fallback to inline template
    {
        echo ""
        echo "# === Gitwatch Auto-Generated Exclusions ==="
        echo "# Database files"
        echo "*.db"
        echo "*.sqlite"
        echo "*.sqlite3"
        echo ""
        echo "# Logs"
        echo "*.log"
        echo "logs/"
        echo ""
        echo "# Large data files"
        echo "*.csv"
        echo "*.parquet"
        echo "*.pkl"
        echo "*.h5"
        echo "*.hdf5"
        echo "*.npy"
        echo "*.npz"
        echo "data/*.csv"
        echo "data/*.parquet"
        echo ""
        echo "# Cache and temporary"
        echo "__pycache__/"
        echo "*.pyc"
        echo ".cache/"
        echo "tmp/"
        echo "temp/"
        echo ""
        echo "# OS files"
        echo ".DS_Store"
        echo "Thumbs.db"
        echo ""
        echo "# IDE files"
        echo ".vscode/"
        echo ".idea/"
        echo "*.swp"
        echo "*.swo"
        echo "# === End Gitwatch Exclusions ==="
    } >> .gitignore
fi

# Remove duplicates from .gitignore
awk '!seen[$0]++' .gitignore > .gitignore.tmp && mv .gitignore.tmp .gitignore

# Configure git remote
echo -e "${YELLOW}Checking git remote configuration...${NC}"
REMOTE_URL=$(git remote get-url origin 2>/dev/null || echo "")

if [ -z "$REMOTE_URL" ]; then
    echo -e "${YELLOW}No git remote found.${NC}"
    echo "Please enter your GitHub repository URL:"
    echo "Example: https://github.com/username/repository.git"
    read -p "GitHub URL: " GITHUB_URL
    
    if [ ! -z "$GITHUB_URL" ]; then
        # Convert to SSH format
        GITHUB_URL=$(echo "$GITHUB_URL" | sed 's|https://github.com/|git@github.com:|')
        git remote add origin "$GITHUB_URL"
        echo -e "${GREEN}Remote added: $GITHUB_URL${NC}"
    fi
else
    # Ensure using SSH format
    if [[ "$REMOTE_URL" == https://* ]]; then
        SSH_URL=$(echo "$REMOTE_URL" | sed 's|https://github.com/|git@github.com:|')
        git remote set-url origin "$SSH_URL"
        echo -e "${GREEN}Converted remote to SSH format${NC}"
    fi
fi

# Create gitwatch service
echo -e "${YELLOW}Creating gitwatch service...${NC}"
cat > ~/.config/systemd/user/${SERVICE_NAME}.service << EOF
[Unit]
Description=Gitwatch for ${PROJECT_NAME}
After=network-online.target ssh-agent.service

[Service]
Type=simple
Environment=SSH_AUTH_SOCK=%t/ssh-agent.socket
WorkingDirectory=${PROJECT_PATH}
ExecStart=/usr/local/bin/gitwatch -r origin -b main ${PROJECT_PATH}
Restart=on-failure
RestartSec=30
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=default.target
EOF

# Reload and start service
systemctl --user daemon-reload
systemctl --user enable ${SERVICE_NAME}.service
systemctl --user start ${SERVICE_NAME}.service

# Initial commit
echo -e "${YELLOW}Creating initial commits...${NC}"
if ! git diff --quiet .gitignore || ! git diff --cached --quiet .gitignore; then
    git add .gitignore
    git commit -m "Add/update .gitignore for gitwatch automation"
fi

# Create README if doesn't exist
if [ ! -f README_GITWATCH.md ]; then
    cat > README_GITWATCH.md << EOF
# Gitwatch Configuration

This repository is automatically monitored by gitwatch.

## Service Information
- **Service Name**: ${SERVICE_NAME}
- **Project Path**: ${PROJECT_PATH}
- **Auto-commit**: Enabled
- **Auto-push**: Enabled (via SSH)

## Management Commands
\`\`\`bash
# Check status
systemctl --user status ${SERVICE_NAME}

# View logs
journalctl --user -u ${SERVICE_NAME} -f

# Restart service
systemctl --user restart ${SERVICE_NAME}

# Stop service
systemctl --user stop ${SERVICE_NAME}

# Disable service
systemctl --user disable ${SERVICE_NAME}
\`\`\`

## Troubleshooting
If pushes fail, check:
1. SSH key is added to GitHub
2. SSH agent is running: \`systemctl --user status ssh-agent\`
3. Service logs: \`journalctl --user -u ${SERVICE_NAME} -n 50\`

Configured on: $(date)
EOF
    
    git add README_GITWATCH.md
    git commit -m "Add gitwatch documentation"
fi

# Test SSH connection
echo -e "${YELLOW}Testing GitHub SSH connection...${NC}"
if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
    echo -e "${GREEN}✓ SSH authentication successful${NC}"
    
    # Try to push
    if git push origin main 2>/dev/null; then
        echo -e "${GREEN}✓ Initial push successful${NC}"
    else
        echo -e "${YELLOW}Note: You may need to set up the GitHub repository first${NC}"
    fi
else
    echo -e "${YELLOW}⚠ SSH key not recognized by GitHub${NC}"
    echo "Please add this key to your GitHub account:"
    echo ""
    cat ~/.ssh/*.pub 2>/dev/null | head -1
    echo ""
fi

# Final status
echo ""
echo -e "${GREEN}✅ Gitwatch setup complete!${NC}"
echo ""
echo "Service status:"
systemctl --user status ${SERVICE_NAME} --no-pager
echo ""
echo -e "To view logs: ${YELLOW}journalctl --user -u ${SERVICE_NAME} -f${NC}"
echo -e "To test: Create/modify a file in ${PROJECT_PATH}"